[RESOURCES]
- Pygame?


<<<<<<<<{{{ commit 01039d3bb4ad7635db09958d21d0d59e13bcf0c8 }}}>>>>>>>>
Notes:
- We're gonna implement the visualisation part of the project in pygame
- Going to test implementating image scaling of the input PNG file to fit display of a certain dimension.
    - I discovered that scaling the image too much from it's original dimensions cause the image to end up lower quality.
      I suppose it might be better that I look into displaying image of it's original dimensions if it's reasonable...?

- Implemented diplaying of the floorplan image in tester.py


<<<<<<<<{{{ commit d5d29fbf4ee17f01d925238cc38f71613eb289b5 }}}>>>>>>>>
- Implemented skeleton floors.py
- Implemented skeleton of features.py
  - Going to finish after this commit :D

Note that I have not tested this as of yet.


<<<<<<<<{{{ commit 1e368087724b0576585c7918f12ddb0ba31f0204 }}}>>>>>>>>
- Implemeneted Nodes, but not yet expansion.


<<<<<<<<{{{ commit 6471a82776b5dbbebb3b964dbef1f1bc85bf420c }}}>>>>>>>>
We're going to begin implementing a simple traversal algorithm

- Implemented BFS
- Implmented A* Search
- Implemented Dijkstras

I can probably begin on the visualisation section before adding more features?


<<<<<<<<{{{ commit 65ce8e60910f6bbf290a36abd6a776fb35c2b29f }}}>>>>>>>>

- Done some organising and additional documentation.


<<<<<<<<{{{ commit e5cb8d2a97df85fb3434ef152299b858e02d9854 }}}>>>>>>>>
Let's begin playing around with the visualiser and classes and whatnot

- Manage to implement generation of a node on press of "n"

let's try "connect" two edges. Consideration:
- Should I make edges actual objects?
  - More moving parts bad >:(
- Or should I keep edges as is?
  - Might have restrictions on future development?
    - The hell type of future development are there gonna be jackass?
    - You is right

Going to implement visualising edges without implementing new "edge" objects,
however, I will first need to test detecting clicking on an object.

Getting some weird ass error:
  'pygame.Rect' object has no attribute 'update'
The heck? The documentations say explicitely that pygame.Rext has the method "update"

I can't seem to solve the above problem, going to implement workaround

- Implemented Node.collision() method
  - This addresses the collision surface/rect problem
- Implemented highlights of nodes
- Implemented connecting edges vla click command


<<<<<<<<{{{ commit f28dba3ccbc520a7b6ca3f90a2ba5de40da2767d }}}>>>>>>>>
I think we should consider the commanding logic:
- Left click the highlighted node to unhighlight it
  - This is for the purpose of highlighting a new node.
- Left click to highlight a node if no nodes are highlighted
  - If at least a node is, create edge between all highlighted nodes and target node
- Left click blank space to create a new node and highlight it
- Right click a node to create an edge between prev_node and it, setting it
  as the new "prev_node"
  - this is equivalent to traversing to it.
- Right click blank space to unhighlight previously highlighted node
  - Repeatedly right click to keep backtracking highlights?
  - No modification to floorplan

Note: Ideas for case of "Right clicking highlighted node" exist, but aren't
set as features.
  - Click and drag to move?
  - Special settings?
Note: We don't have a command for visualising traversal yet. Can pygame even support multi keys?

Let's try implementing these 6 items first, and then we'll see if we can get to
also implementing visualisation of the traversal


- Implemented [Left click] [Highlighted node]
- Implemented [Left click] [Unhighlighted node]
- Implemented [Left click] [Blank spot]
- Implemented [Right click] [Highlighted node]
- Implemented [Right click] [Unhighlighted node]
- Implemented [Right click] [Blank spot]

Note that I don't actually have a method for highlighting multiple nodes... Hmm, would that be necessary?










[End]